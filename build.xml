<project name="salesforce" default="validate" basedir="." xmlns:sf="antlib:com.salesforce">

  <!-- *************************************************************** -->
  <!--   Properties for Salesforce ANT targets                         -->
  <!-- *************************************************************** -->
  <property file="${basedir}/build.properties"/>
  <property environment="env"/>
  
  <property name="dataLoaderAPIVersion" value="35.0.0-uber" />
  <!-- *************************************************************** -->
  <!--   Set-Up of Salesforce Ant / CLI Jar Classpath for        -->
  <!-- *************************************************************** -->
  <!-- Define required jars for salesforce dataloder CLI-->
  <path id="taskDependencies">
    <pathelement location="${basedir}/lib/ant.jar"/>
    <pathelement location="${basedir}/lib/antutils.jar"/>
    <pathelement location="${basedir}/lib/commons-io-2.4.jar"/>
    <pathelement location="${basedir}/lib/commons-lang-2.6.jar"/>
    <pathelement location="${basedir}/lib/commons-logging-1.1.3.jar"/>
    <pathelement location="${basedir}/lib/gson-2.2.4.jar"/>
    <pathelement location="${basedir}/lib/httpclient-4.3.5.jar"/>
    <pathelement location="${basedir}/lib/httpcore-4.3.2.jar"/>
    <pathelement location="${basedir}/lib/json-20080701.jar"/>
  </path>
  <!-- Define salesforce Ant Jar-->
  <taskdef resource="com/salesforce/antlib.xml" uri="antlib:com.salesforce">
    <classpath>
      <pathelement location="${basedir}/lib/ant-salesforce.jar" />
    </classpath>
  </taskdef>
  <!-- ***************************************************************************** -->
  <!-- ANT Import Files for invoking APEX inside ANT Scripts                         -->
  <!-- ***************************************************************************** -->
  <import file="${basedir}/lib/exec_anon.xml"/>
  <import file="${basedir}/lib/deploy.xml"/>
  <import file="${basedir}/lib/undeploy.xml"/>
  <import file="${basedir}/lib/run_tests.xml"/>
  <import file="${basedir}/lib/package_generator.xml"/>
  <!-- ***************************************************************************** -->
  <!-- Recreate the deployment directory and retrieve  meta-data from your org     -->
  <!-- ***************************************************************************** -->
  <target name="retrieve" depends="proxy">
    <echo level="info">Performing a retrieve</echo>
    <mkdir dir="${basedir}"/>
    <sf:retrieve username="${sf.username}"
     password="${sf.password}"
     serverurl="${sf.serverurl}"
     retrieveTarget="src"
     unpackaged="package.xml"
     pollWaitMillis="${sfdc.pollWaitMillis}"
     maxPoll="${sfdc.maxPoll}"/>
     <delete includeemptydirs="true">
      <fileset dir="src" includes="**/*"/>
    </delete>
   <!-- <move file="${basedir}" tofile="src"/> -->
  </target>

  <target name="retrieve-updates" description="Retrieve update(s)">
    <echo level="info">Performing a retrieve</echo>
    <mkdir dir="${basedir}/${sfdc.retrieveTarget}"/>
    <sf:retrieve username="${sf.username}"
     password="${sf.password}"
     serverurl="${sf.serverurl}"
     retrieveTarget="${basedir}/${sfdc.retrieveTarget}"
     unpackaged="src/package.xml"
     pollWaitMillis="${sfdc.pollWaitMillis}"
     maxPoll="${sfdc.maxPoll}"/>
    <copy todir="src">
      <fileset dir="${basedir}/${sfdc.retrieveTarget}"/>
    </copy>
  </target>  

  <target name="validate-updates" description="Validate updates">
    <echo level="info">Performing a validation</echo>
    <sf:deploy username="${sf.username}"
      password="${sf.password}"
      serverurl="${sf.serverurl}"
      checkOnly="true"
      logType="Debugonly"
      allowMissingFiles="true"
      autoUpdatePackage="true"
      ignoreWarnings="true"
      deployRoot="${basedir}/${sfdc.retrieveTarget}"
      pollWaitMillis="${sfdc.pollWaitMillis}"
      maxPoll="${sfdc.maxPoll}">
    </sf:deploy>    
  </target>  
  <!-- ***************************************************************************** -->
  <!-- QuickDeploy the meta-data from code Repository to salesforce your org     -->
  <!-- ***************************************************************************** -->
   <target name="quickdeploy" depends="proxy">
        <echo level="info">Performing the deploy</echo>
        <sf:deploy username="${sf.username}"
        password="${sf.password}"
        serverurl="${sf.serverurl}"
        deployRoot="src"
        pollWaitMillis="${sfdc.pollWaitMillis}"
        maxPoll="${sfdc.maxPoll}" autoUpdatePackage="true" />
    </target>
  <!-- ***************************************************************************** -->
  <!-- Deploy the meta-data from code Repository to salesforce your org     -->
  <!-- ***************************************************************************** -->
  <target name="deploy" depends="proxy">
    <echo level="info">Performing the deploy</echo>
    <sf:deploy username="${sf.username}"
      password="${sf.password}"
      serverurl="${sf.serverurl}"
      runAllTests="false"
      testLevel="NoTestRun"
      logType="Detail"
      allowMissingFiles="true"
      autoUpdatePackage="true"
      ignoreWarnings="true"
      deployRoot="${basedir}/src"
      pollWaitMillis="${sfdc.pollWaitMillis}"
      maxPoll="${sfdc.maxPoll}"/>
  </target>

  <target name="deployPackage" depends="deploy"/>
  
  <!-- ***************************************************************************** -->
  <!-- Deploy Delta the meta-data from code Repository to salesforce your org      -->
  <!-- ***************************************************************************** -->
  <target name="deployDelta">
    <echo level="info">Performing the delta deploy</echo>
    <sf:deploy username="${sf.username}"
      password="${sf.password}"
      serverurl="${sf.serverurl}"
      runAllTests="false"
      testLevel="NoTestRun"
      logType="Detail"
      allowMissingFiles="true"
      autoUpdatePackage="true"
      ignoreWarnings="true"
      deployRoot="${basedir}/deploy/src"
      pollWaitMillis="${sfdc.pollWaitMillis}"
      maxPoll="${sfdc.maxPoll}"/>
  </target> 

  <!-- ***************************************************************************** -->
  <!-- Validate the  set of meta-data before deployment with Test run                -->
  <!-- ***************************************************************************** -->
  <target name="validate" depends="proxy">
    <echo level="info">Testing the deployment</echo>
    <sf:deploy username="${sf.username}"
      password="${sf.password}"
      serverurl="${sf.serverurl}"
      checkOnly="true"
      runAllTests="true"
      logType="Debugonly"
      testLevel="RunLocalTests"
      allowMissingFiles="true"
      autoUpdatePackage="true"
      ignoreWarnings="true"
      deployRoot="src"
      pollWaitMillis="${sfdc.pollWaitMillis}"
      maxPoll="${sfdc.maxPoll}"/>
  </target>
 
  <!-- ************************************************************************************************ -->
  <!-- Validate the  set of  meta-data before deployment with Test Classes for Delta Deploy       -->
  <!-- ************************************************************************************************ -->
  <target name="validateDelta">
    <echo level="info">Testing the deployment of  with Delta</echo>
    <sf:deploy username="${sf.username}"
      password="${sf.password}"
      serverurl="${sf.serverurl}"
      checkOnly="true"
      logType="Debugonly"
      allowMissingFiles="true"
      autoUpdatePackage="true"
      ignoreWarnings="true"
      deployRoot="${basedir}/deploy/src"
      pollWaitMillis="${sfdc.pollWaitMillis}"
      maxPoll="${sfdc.maxPoll}">      
    </sf:deploy>
  </target>
 
  <!-- ***************************************************************************** -->
  <!-- Data export / import Targets For  For Post Deployment Activities        -->
  <!-- ***************************************************************************** -->
  <target name="initDataDirectory" description="Removes and re-creates a blank data directory in orgs/${orgname}">
    <delete dir="${basedir}/orgs/${orgname}/data"/>
    <mkdir dir="${basedir}/orgs/${orgname}/data"/>
  </target>
  <!-- Export Data from given Salesforce Org -->
  <target name="exportData" description="Export Salesforce objects" depends="proxy">
    <sfExport object="${object}" orgserver="${sf.orgserver}" basedir="${basedir}" orgname="${orgname}" username="${sf.username}" password="${sf.passwordencrypted}" soql="${soql}" />
  </target>

  <macrodef name="sfExport">
    <attribute name="object"/>
    <attribute name="basedir"/>
    <attribute name="orgname"/>
    <attribute name="username"/>
    <attribute name="password"/>
    <attribute name="orgserver"/>
    <attribute name="soql"/>
    <sequential>
      <echo message="Exporting @{object}"/>
      <mkdir dir="@{basedir}/orgs/@{orgname}/data"/>
      <copy file="@{basedir}/datascripts/template-export-process-conf.xml" tofile="@{basedir}/orgs/@{orgname}/data/process-conf.xml" overwrite="true" failonerror="true"/>
      <replace file="@{basedir}/orgs/@{orgname}/data/process-conf.xml">
        <replacefilter token="_ORGSERVER_" value="@{orgserver}"/>
        <replacefilter token="_USERNAME_" value="@{username}"/>
        <replacefilter token="_ENCRYPTED_PASSWORD_" value="@{password}"/>
        <replacefilter token="_ENCRYPTION_KEY_FILE_" value="@{basedir}/datascripts/dataloader_encryption_key.txt"/>
        <replacefilter token="_DEBUG_MSG_FILE_" value="@{basedir}/orgs/@{orgname}/data/debug.log"/>
        <replacefilter token="_OBJECT_" value="@{object}"/>
        <replacefilter token="_DATA_FILENAME_" value="@{basedir}/orgs/@{orgname}/data/@{object}Export.csv"/>
        <replacefilter token="_MAPPING_FILE_" value="@{basedir}/datascripts/mappingfiles/@{object}ExportMap.sdl"/>
        <replacefilter token="_OUTPUT_SUCCESS_FILE_" value="@{basedir}/orgs/@{orgname}/data/@{object}Export_success.csv"/>
        <replacefilter token="_OUTPUT_ERROR_FILE_" value="@{basedir}/orgs/@{orgname}/data/@{object}Export_error.csv"/>
        <replacefilter token="_EXTRACTION_SOQL_" value="@{soql}"/>
      </replace>
      <java classname="com.salesforce.dataloader.process.ProcessRunner" classpath="@{basedir}/lib/dataloader-${dataLoaderAPIVersion}.jar" failonerror="true">
        <sysproperty key="salesforce.config.dir" value="@{basedir}/orgs/@{orgname}/data"/>
        <arg line="process.name=exportObject"/>
      </java>
    </sequential>
  </macrodef>
  <!-- ***************************************************************************** -->
  <!-- Validate the  set of  Destructive chhanges meta-data before deployment                          -->
  <!-- ***************************************************************************** --> 
     <target name="validate-undeploy">
      <echo level="info">Performing validate undeploy - DESTRUCTIVE CHANGE</echo>  
      <sf:deploy username="${sf.username}" 
        password="${sf.password}" 
        serverurl="${sf.serverurl}" 
        checkOnly="true"
        logType="Debugonly"
    testLevel="RunSpecifiedTests"
        allowMissingFiles="true"
        autoUpdatePackage="true"
        ignoreWarnings="true"       
        deployRoot="${basedir}/undeploy"
        pollWaitMillis="${sfdc.pollWaitMillis}"
        maxPoll="${sfdc.maxPoll}">        
   
        </sf:deploy>
    </target>

  <!-- ***************************************************************************** -->
  <!-- Performing the tests and deploy of Meta-data                                  -->
  <!-- ***************************************************************************** -->
  <target name="deployRunAllTests">
    <echo level="info">Performing the tests and deploy</echo>
    <sf:deploy username="${sf.username}"
      password="${sf.password}"
      serverurl="${sf.serverurl}"
      checkOnly="false"
      runAllTests="true"
      testLevel="RunLocalTests"
      logType="Detail"
      allowMissingFiles="true"
      autoUpdatePackage="true"
      ignoreWarnings="true"
      deployRoot="${basedir}/src"
      pollWaitMillis="${sfdc.pollWaitMillis}"
      maxPoll="${sfdc.maxPoll}"/>
    </target>
   <!-- ***************************************************************************** -->
  <!-- Deploy the meta-data from code Repository to salesforce your org with test class run NIkhil    -->
  <!-- ***************************************************************************** -->
  <target name="deploy-with-Testclasses-execution">
    <echo level="info">Performing the deploy</echo>
    <sf:deploy username="${sf.username}"
      password="${sf.password}"
      serverurl="${sf.serverurl}"
      runAllTests="false"
      testLevel="RunLocalTests"
      logType="Detail"
      allowMissingFiles="true"
      autoUpdatePackage="true"
      ignoreWarnings="true"
      deployRoot="${basedir}/src"
      pollWaitMillis="${sfdc.pollWaitMillis}"
      maxPoll="${sfdc.maxPoll}"/>
  </target>
  <!-- *************************************************************************************** -->
  <!-- Performing undeploy Salesforce components from Salesforce Org- DESTRUCTIVE CHANGE       -->
  <!-- *************************************************************************************** -->
  <target name="undeploy">
    <echo level="info">Performing undeploy - DESTRUCTIVE CHANGE</echo>
    <sf:deploy username="${sf.username}"
      password="${sf.password}"
      serverurl="${sf.serverurl}"
      checkOnly="true"
      ignoreWarnings="true"
      deployRoot="${basedir}/undeploy"
      pollWaitMillis="${sfdc.pollWaitMillis}"
      maxPoll="${sfdc.maxPoll}"/>
  </target>
 <!-- *************************************************************************************** -->
  <!-- Performing deploy undeploy Salesforce components from Salesforce Org- DESTRUCTIVE CHANGE       -->
  <!-- *************************************************************************************** -->  
    <target name="deploy-undeploy">
      <echo level="info">Performing validate undeploy - DESTRUCTIVE CHANGE</echo>  
      <sf:deploy username="${sf.username}" 
        password="${sf.password}" 
        serverurl="${sf.serverurl}" 
        runAllTests="false"
        testLevel="NoTestRun"
        logType="Debugonly"
        allowMissingFiles="true"
        autoUpdatePackage="true"
        ignoreWarnings="true"       
        deployRoot="${basedir}/undeploy"
        pollWaitMillis="${sfdc.pollWaitMillis}"
        maxPoll="${sfdc.maxPoll}"/>        
    </target>
  <!-- *************************************************************************************** -->
  <!-- CI Sandbox setup scripts to allow data dependent tests to pass                          -->
  <!-- *************************************************************************************** -->
  <target name="sandbox-setup">
    <echo level="info">CI Sandbox setup scripts to allow data dependent tests to pass</echo>
    <antcall target="ExecAnonScript">
      <param name="what" value="${basedir}/scripts/sandbox-setup.apex" />
      <param name="username" value="${sf.username}" />
      <param name="password" value="${sf.password}" />
      <param name="serverurl" value="${sf.serverurl}"/>
    </antcall>
  </target>
  
  <!-- *************************************************************************************** -->
  <!-- Recreate the deployment directory and retrieve all meta-data from your org              -->
  <!-- *************************************************************************************** -->
  <target name="retrieveAll" depends="proxy">
  <echo level="info">Performing a retrieve</echo>
  <mkdir dir="${basedir}"/>
  <sf:retrieve username="${sf.username}"
   password="${sf.password}"
   serverurl="${sf.serverurl}"
   retrieveTarget="${basedir}"
   unpackaged="packageAll.xml"
   pollWaitMillis="${sfdc.pollWaitMillis}"
   maxPoll="${sfdc.maxPoll}"/>
   <delete includeemptydirs="true">
    <fileset dir="src" includes="**/*"/>
  </delete>
  <move file="${basedir}" tofile="src"/>
  </target>
  <!-- *************************************************************************************** -->
  <!-- Clean-up the unwanted salesforce components                           -->
  <!-- *************************************************************************************** -->
  <target name="cleanup">
    <replaceregexp byline="true" flags="g">
      <regexp pattern="&lt;icon&gt;.*&lt;/icon&gt;.*$"/>
      <substitution expression=""/>
      <fileset dir="${basedir}">
        <include name="**/*.tab"/>
      </fileset>
    </replaceregexp>
    <replaceregexp byline="false" flags="gm">
      <regexp pattern="[\s].*listViews(.*[\s]){2}.*ALL(.*\s){12}"/>
      <substitution expression=""/>
      <fileset dir="${basedir}">
        <include name="**/Asset__c.object"/>
      </fileset>
    </replaceregexp>
    <replaceregexp byline="false" flags="gm">
      <regexp pattern="[\s].*userPermissions.*[\s].*[\s].*(ViewAllData|EditBillingInfo|ManageSandboxes|ManageTranslation|CustomizeApplication|LightningExperienceUser|ManageContentProperties|ManageContentTypes|ContentAdministrator|RetainFieldHistory).*[\s].*"/>
      <substitution expression=""/>
      <fileset dir="${basedir}">
        <include name="**/*.profile"/>
        <include name="**/*.permissionset"/>
      </fileset>
    </replaceregexp>
    <replaceregexp byline="false" flags="gm">
      <regexp pattern="[\s].*layoutAssignments.*[\s].*[\s].*(SocialPost-Social|SocialPersona-Social).*[\s]"/>
      <substitution expression=""/>
      <fileset dir="${basedir}">
        <include name="**/*.profile"/>
        <include name="**/*.permissionset"/>
      </fileset>
    </replaceregexp>
    <replaceregexp byline="false" flags="gm">
      <regexp pattern="[\s].*layoutAssignments.*[\s].*[\s].*(ContentVersion-One).*[\s].*"/>
      <substitution expression=""/>
      <fileset dir="${basedir}">
        <include name="**/*.profile"/>
        <include name="**/*.permissionset"/>
      </fileset>
    </replaceregexp>    
    <delete><fileset dir="${basedir}" includes="**/agf__ADM_Work__c.object"/></delete>
    <delete><fileset dir="${basedir}" includes="**/KnowledgeArticleVersion.object"/></delete>
    <delete><fileset dir="${basedir}" includes="**/SocialPost.workflow"/></delete>
    <delete><fileset dir="${basedir}" includes="**/SocialPersona.workflow"/></delete>
    <delete>
      <fileset dir="${basedir}">
        <include name="**/SocialPersona-Social Persona Layout.layout"/>
        <include name="**/SocialPost-Social Post Layout.layout"/>
      </fileset>
    </delete>
    <delete><fileset dir="${basedir}" includes="**/Question.workflow"/></delete>
    <delete><fileset dir="${basedir}" includes="**/Reply.workflow"/></delete>
    <delete><fileset dir="${basedir}" includes="**/ExternalEventMapping.workflow"/></delete> 
    <delete><fileset dir="${basedir}" includes="**/*.connectedApp"/></delete>
    <delete><fileset dir="${basedir}" includes="**/*.dataSource"/></delete>
    <delete><fileset dir="${basedir}" includes="**/*.network"/></delete>
    <delete><fileset dir="${basedir}" includes="**/API_Only.permissionset"/></delete>
    <delete><fileset dir="${basedir}" includes="**/***HELP***.homePageComponent"/></delete>
     <delete><fileset dir="${basedir}" includes="**/*.flow"/></delete>
    <delete><fileset dir="${basedir}" includes="**/objectTranslations/Account*"/></delete>
    <delete><fileset dir="${basedir}" includes="**/Case.assignmentRules"/></delete>
    <delete><fileset dir="${basedir}" includes="src/package.xml"/></delete>
    <!--<antcall target="generatePackage"/>-->
  </target>

<target name="retrieveAllClasses">
    <echo level="info">Performing a retrieve</echo>
    <mkdir dir="${basedir}/allclasses"/>
    <sf:retrieve username="${sf.username}"
     password="${sf.password}"
     serverurl="${sf.serverurl}"
     retrieveTarget="${basedir}/allclasses"
     unpackaged="package-allclasses.xml"
     pollWaitMillis="${sfdc.pollWaitMillis}"
     maxPoll="${sfdc.maxPoll}"/>
</target>

<target name="fullCIEnhanced">
    <sfRunTests>
        <fileset dir="${basedir}/allclasses">
            <include name="**/*Test*.cls"/>
            <include name= "**/*test*.cls"/>
            <include name="**/*TEST*.cls"/>
        </fileset>
    </sfRunTests>
</target>

<scriptdef name="sfRunTests" language="javascript">
   
    <element name="fileset" type="fileset"/>

    <![CDATA[
        
        var projectPrefixes = project.getProperty("sf.projectPrefixes").split(',');
        var skip = (project.getProperty("sf.skipProjects") == 'true');
        self.log(skip);
        self.log(projectPrefixes);

        var filesets = elements.get("fileset");
        var filesetsIterator = filesets.iterator();
        var projectClasses = [];
        while(filesetsIterator.hasNext()){
            var fs = filesetsIterator.next();
            var iter = fs.iterator();
            while(iter.hasNext()){
                var resource = iter.next();
                var clazz = resource.getName().replace(".cls","").replace("classes/","");
                var includeClass = true;
                for(j in projectPrefixes){
                    
                    if(!skip){
                      if(!clazz.startsWith(projectPrefixes[j])){
                        includeClass = false;
                      }
                    }
                    else{
                      if(clazz.startsWith(projectPrefixes[j])){
                        includeClass = false;
                      }
                    }
                }
                if(includeClass){
                  self.log("TEST CLASS: " + clazz);
                  projectClasses.push(clazz);
                }
            }
        }

        var deployTask = project.createTask('antlib:com.salesforce:deploy');
        
        deployTask.setUsername(project.getProperty("sf.username"));
        deployTask.setPassword(project.getProperty("sf.password"));
        deployTask.setServerURL(project.getProperty("sf.serverurl"));
        
        deployTask.setLogType('Debugonly');
        deployTask.setAllowMissingFiles('true');
        deployTask.setAutoUpdatePackage('true');
        deployTask.setIgnoreWarnings('true');
        deployTask.setDeployRoot('src');
        deployTask.setCheckonly('true');
        deployTask.setMaxPoll("10000");
        deployTask.setTestLevel('RunSpecifiedTests');
        
        for(i in projectClasses){

          var testsElement = deployTask.getClass().getClassLoader().loadClass("com.salesforce.ant.DeployTask$CodeNameElement").newInstance();
          testsElement.addText(projectClasses[i]);
          deployTask.addRunTest(testsElement);
        }

        deployTask.perform();
        
     ]]>
</scriptdef>
  <target name="proxy">		
 	<property name="proxy.host" value="${proxy.host}" />		
 	<property name="proxy.port" value="${proxy.port}" />		
 	<property name="proxy.user" value="${proxy.user}" />		
 	<property name="proxy.pwd" value="${proxy.pwd}" />		
 	<setproxy proxyhost="${proxy.host}" proxyport="${proxy.port}" proxyuser="${proxy.user}" proxypassword="${proxy.pwd}" />		
 </target>		

 	
	<macrodef name="git">
		<attribute name="command" />
		<attribute name="dir" default="src" />
		<element name="args" optional="true" />
		<sequential>
			<echo message="git @{command}" />
			<exec executable="git" dir="@{dir}">
				<arg value="@{command}" />
				<args/>
			</exec>
		</sequential>
	</macrodef>

	<target name="GitOperations" depends="retrieve">

		<echo message="Commiting all changes with message ${gt.commitMessage}" /> 

		<git command="add">
			<args>
				<arg value="." />
			</args>
		</git>

		<git command="commit">
			<args>
				<arg value="-am default" />
			</args>
		</git>
	</target>
	
</project>
